pipeline {
    agent {
        kubernetes {
            defaultContainer 'container-exec'
            yamlFile '.ci/KubernetesPod.yml'
        }
    }
    stages {
        stage('Update PR Status'){
            steps {
                gitHubPRStatus githubPRMessage('Validation is running')
            }
        }
        stage('Parallel Stage') {
            parallel {
                stage('Bandit') {
                    steps {
                        sh './.ci/run_lint.sh bandit "--silent --ini setup.cfg"'
                    }
                }
                stage('Flake8') {
                    steps {
                        sh './.ci/run_lint.sh flake8'
                    }
                }
                stage('Pydocstyle') {
                    steps {
                        sh './.ci/run_lint.sh pydocstyle'
                    }
                }
                stage('Pytest') {
                    steps {
                        sh 'pip install -qq -r .ci/requirements_pr.txt'
                        sh 'pip install -qq -r requirements.txt' // there can be new dependencies since the last docker build
                        sh 'pytest -q tests'
                    }
                }
            }
        }
    }
    post {
        always {
            githubPRStatusPublisher buildMessage:
                message(
                    failureMsg: githubPRMessage('Can\'t set status; build failed.'),
                    successMsg: githubPRMessage('Can\'t set status; build succeeded.')),
                errorHandler: statusOnPublisherError('UNSTABLE'),
                statusMsg: githubPRMessage('Jenkins finished the run'),
                statusVerifier: null,
                unstableAs: 'FAILURE'
        }
    }
}